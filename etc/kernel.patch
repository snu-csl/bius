diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h
index 8c87a2e0b660..546ca4b99707 100644
--- a/arch/x86/include/asm/tlbflush.h
+++ b/arch/x86/include/asm/tlbflush.h
@@ -52,6 +52,10 @@ static inline void cr4_clear_bits(unsigned long mask)
 	local_irq_restore(flags);
 }
 
+extern void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
+				unsigned long end, unsigned int stride_shift,
+				bool freed_tables);
+
 #ifndef MODULE
 /*
  * 6 because 6 should be plenty and struct tlb_state will fit in two cache
@@ -225,9 +229,6 @@ void flush_tlb_others(const struct cpumask *cpumask,
 				: PAGE_SHIFT, false)
 
 extern void flush_tlb_all(void);
-extern void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
-				unsigned long end, unsigned int stride_shift,
-				bool freed_tables);
 extern void flush_tlb_kernel_range(unsigned long start, unsigned long end);
 
 static inline void flush_tlb_page(struct vm_area_struct *vma, unsigned long a)
diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c
index 569ac1d57f55..a7440ec03c28 100644
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@ -918,6 +918,7 @@ void flush_tlb_mm_range(struct mm_struct *mm, unsigned long start,
 	put_flush_tlb_info();
 	put_cpu();
 }
+EXPORT_SYMBOL(flush_tlb_mm_range);
 
 
 static void do_flush_tlb_all(void *info)
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 5106db3ad1ce..7ee738709dbc 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -2743,6 +2743,7 @@ unsigned long change_prot_numa(struct vm_area_struct *vma,
 struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
 int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
 			unsigned long pfn, unsigned long size, pgprot_t);
+int partial_map_pfn(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn, unsigned long size, pgprot_t prot);
 int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
 int vm_insert_pages(struct vm_area_struct *vma, unsigned long addr,
 			struct page **pages, unsigned long *num);
diff --git a/mm/memory.c b/mm/memory.c
index b70bd3ba3388..f4d191f56da0 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -2328,6 +2328,31 @@ int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr,
 }
 EXPORT_SYMBOL(remap_pfn_range);
 
+int partial_map_pfn(struct vm_area_struct *vma, unsigned long addr, unsigned long pfn, unsigned long size, pgprot_t prot) {
+    pgd_t *pgd;
+    unsigned long next;
+    unsigned long end = addr + PAGE_ALIGN(size);
+    struct mm_struct *mm = vma->vm_mm;
+    unsigned long remap_pfn = pfn;
+    int err;
+
+    if (WARN_ON_ONCE(!PAGE_ALIGNED(addr)))
+        return -EINVAL;
+
+    BUG_ON(addr >= end);
+    pfn -= addr >> PAGE_SHIFT;
+    pgd = pgd_offset(mm, addr);
+    do {
+        next = pgd_addr_end(addr, end);
+        err = remap_p4d_range(mm, pgd, addr, next, pfn + (addr >> PAGE_SHIFT), prot);
+        if (err)
+            break;
+    } while (pgd++, addr = next, addr != end);
+
+    return err;
+}
+EXPORT_SYMBOL(partial_map_pfn);
+
 /**
  * vm_iomap_memory - remap memory to userspace
  * @vma: user vma to map to
